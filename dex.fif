// automatically generated from `/Users/tolyayanot/lite-client/crypto/smartcont/stdlib.fc` `msg_hex_comment.fc` `dex/dex.fc` 
PROGRAM{
  85643 DECLMETHOD str2bin
  DECLPROC parse_msg
  DECLPROC clone_slice
  DECLPROC pack_addr
  DECLPROC ~load_currency
  DECLPROC store_currency
  DECLPROC parse_order
  DECLPROC store_order
  DECLPROC is_gram
  DECLPROC get_extra_currency
  DECLPROC send_message_back
  DECLPROC transfer
  DECLPROC transfer_from
  DECLPROC find_match_order
  DECLPROC try_match_order
  DECLPROC process_user_msg
  DECLPROC process_trc20_reply
  DECLPROC recv_internal
  DECLPROC recv_external
  85143 DECLMETHOD seqno
  65641 DECLMETHOD orders
  77572 DECLMETHOD my_orders
  90191 DECLMETHOD test_recv_internal
  str2bin PROC:<{
    NEWC
    OVER
    SBITS
    3 RSHIFT#
    0 PUSHINT
    WHILE:<{
      s0 s1 PUSH2
      LESS
    }>DO<{
      s0 s3 XCHG
      8 LDU
      OVER
      48 EQINT
      IF:<{
        NIP
        0 PUSHINT
        s0 s3 XCHG2
        4 STU
      }>ELSE<{
        OVER
        49 EQINT
        IF:<{
          NIP
          1 PUSHINT
          s0 s3 XCHG2
          4 STU
        }>ELSE<{
          OVER
          50 EQINT
          IF:<{
            NIP
            2 PUSHINT
            s0 s3 XCHG2
            4 STU
          }>ELSE<{
            OVER
            51 EQINT
            IF:<{
              NIP
              3 PUSHINT
              s0 s3 XCHG2
              4 STU
            }>ELSE<{
              OVER
              52 EQINT
              IF:<{
                NIP
                4 PUSHINT
                s0 s3 XCHG2
                4 STU
              }>ELSE<{
                OVER
                53 EQINT
                IF:<{
                  NIP
                  5 PUSHINT
                  s0 s3 XCHG2
                  4 STU
                }>ELSE<{
                  OVER
                  54 EQINT
                  IF:<{
                    NIP
                    6 PUSHINT
                    s0 s3 XCHG2
                    4 STU
                  }>ELSE<{
                    OVER
                    55 EQINT
                    IF:<{
                      NIP
                      7 PUSHINT
                      s0 s3 XCHG2
                      4 STU
                    }>ELSE<{
                      OVER
                      56 EQINT
                      IF:<{
                        NIP
                        8 PUSHINT
                        s0 s3 XCHG2
                        4 STU
                      }>ELSE<{
                        OVER
                        57 EQINT
                        IF:<{
                          NIP
                          9 PUSHINT
                          s0 s3 XCHG2
                          4 STU
                        }>ELSE<{
                          OVER
                          65 EQINT
                          IF:<{
                            NIP
                            10 PUSHINT
                            s0 s3 XCHG2
                            4 STU
                          }>ELSE<{
                            OVER
                            66 EQINT
                            IF:<{
                              NIP
                              11 PUSHINT
                              s0 s3 XCHG2
                              4 STU
                            }>ELSE<{
                              OVER
                              67 EQINT
                              IF:<{
                                NIP
                                12 PUSHINT
                                s0 s3 XCHG2
                                4 STU
                              }>ELSE<{
                                OVER
                                68 EQINT
                                IF:<{
                                  NIP
                                  13 PUSHINT
                                  s0 s3 XCHG2
                                  4 STU
                                }>ELSE<{
                                  OVER
                                  69 EQINT
                                  IF:<{
                                    NIP
                                    14 PUSHINT
                                    s0 s3 XCHG2
                                    4 STU
                                  }>ELSE<{
                                    SWAP
                                    70 EQINT
                                    IF:<{
                                      15 PUSHINT
                                      s0 s3 XCHG2
                                      4 STU
                                    }>ELSE<{
                                      s0 s2 XCHG
                                    }>
                                  }>
                                }>
                              }>
                            }>
                          }>
                        }>
                      }>
                    }>
                  }>
                }>
              }>
            }>
          }>
        }>
      }>
      s0 s3 XCHG
      INC
      s2 s3 XCHG
    }>
    s2 s3 XCHG
    3 BLKDROP
    ENDC
    CTOS
  }>
  parse_msg PROC:<{
    DUP
    SBITS
    NEWC
    s3 PUSH
    0 GTINT
    IFJMP:<{
      -ROT
      LDSLICEX
      -ROT
      STSLICER
      OVER
      SREFS
      0 GTINT
      IF:<{
        SWAP
        LDREF
        DROP
        CTOS
        STSLICER
      }>ELSE<{
        NIP
      }>
      ENDC
      CTOS
    }>
    s3 POP
    LDSLICEX
    SWAP
    str2bin CALLDICT
    s1 s2 XCHG
    STSLICER
    OVER
    SREFS
    0 GTINT
    IF:<{
      SWAP
      LDREF
      DROP
      CTOS
      str2bin CALLDICT
      STSLICER
    }>ELSE<{
      NIP
    }>
    ENDC
    CTOS
    32 LDU
  }>
  clone_slice PROC:<{
    NEWC
    SWAP
    STSLICER
    ENDC
    CTOS
  }>
  pack_addr PROC:<{
    NEWC
    s1 s2 XCHG
    8 STI
    SWAP
    STSLICER
    ENDC
    CTOS
  }>
  ~load_currency PROC:<{
    8 LDU
    SWAP
    IFJMP:<{
      264 PUSHINT
      LDSLICEX
      SWAP
    }>
    32 LDSLICE
    SWAP
  }>
  store_currency PROC:<{
    DUP
    SBITS
    32 NEQINT
    IF:<{
      1 PUSHINT
    }>ELSE<{
      0 PUSHINT
    }>
    ROT
    8 STU
    SWAP
    STSLICER
  }>
  parse_order PROC:<{
    LDREF
    SWAP
    CTOS
    SWAP
    264 PUSHINT
    LDSLICEX
    LDGRAMS
    ~load_currency CALLDICT
    NIP
    s0 s3 XCHG
    LDGRAMS
    ~load_currency CALLDICT
    SWAP
    1 LDI
    32 LDU
    DROP
    s5 s6 XCHG
    s4 s5 XCHG
  }>
  store_order PROC:<{
    NOW
    86400 PUSHINT
    ADD
    NEWC
    s0 s4 XCHG2
    STGRAMS
    ROT
    store_currency CALLDICT
    1 STI
    32 STU
    ENDC
    NEWC
    STREF
    s0 s3 XCHG2
    STSLICER
    SWAP
    STGRAMS
    SWAP
    store_currency CALLDICT
  }>
  is_gram PROC:<{
    DUP
    SBITS
    32 EQINT
    SWAP
    32 LDI
    DROP
    0 EQINT
    AND
  }>
  get_extra_currency PROC:<{
    DUP
    SBITS
    32 NEQINT
    IFJMP:<{
      DROP
      0 PUSHINT
    }>
    32 LDI
    DROP
  }>
  send_message_back PROC:<{
    0 PUSHINT
    4 PUSHINT
    24 PUSHINT
    NEWC
    6 STU
    3 STU
    s0 s6 XCHG2
    STSLICER
    s0 s4 XCHG2
    STGRAMS
    s1 s4 XCHG
    107 STU
    s1 s4 XCHG
    32 STU
    s1 s2 XCHG
    64 STU
    32 STU
    ENDC
    SWAP
    SENDRAWMSG
  }>
  transfer PROC:<{
    OVER
    is_gram CALLDICT
    s2 PUSH
    get_extra_currency CALLDICT
    SWAP
    IF:<{
      3 BLKDROP
      0 PUSHINT
      4 PUSHINT
      24 PUSHINT
      NEWC
      6 STU
      3 STU
      s0 s3 XCHG2
      STSLICER
      SWAP
      STGRAMS
      107 STU
      ENDC
      0 PUSHINT
      SENDRAWMSG
    }>ELSE<{
      DUP
      IF:<{
        NIP
        NIP
        30 PUSHPOW2
        NEWDICT
        NEWC
        s0 s4 XCHG2
        STGRAMS
        s0 s0 s3 XCHG3
        32 PUSHINT
        DICTISETB
        0 PUSHINT
        4 PUSHINT
        24 PUSHINT
        NEWC
        6 STU
        3 STU
        s0 s4 XCHG2
        STSLICER
        ROT
        STGRAMS
        STDICT
        106 STU
        ENDC
        0 PUSHINT
        SENDRAWMSG
      }>ELSE<{
        DROP
        30 PUSHPOW2
        1 PUSHINT
        0 PUSHINT
        4 PUSHINT
        24 PUSHINT
        NEWC
        6 STU
        3 STU
        s0 s5 XCHG2
        STSLICER
        ROT
        STGRAMS
        s1 s3 XCHG
        107 STU
        s1 s2 XCHG
        32 STU
        64 STU
        ROT
        STSLICER
        SWAP
        STGRAMS
        ENDC
        0 PUSHINT
        SENDRAWMSG
      }>
    }>
  }>
  transfer_from PROC:<{
    30 PUSHPOW2
    MYADDR
    REWRITEVARADDR
    pack_addr CALLDICT
    NEWC
    s0 s6 XCHG2
    STSLICER
    s0 s5 XCHG2
    STSLICER
    s0 s3 XCHG2
    STGRAMS
    ENDC
    2 PUSHINT
    0 PUSHINT
    4 PUSHINT
    24 PUSHINT
    NEWC
    6 STU
    3 STU
    s0 s4 XCHG2
    STSLICER
    s0 s5 XCHG2
    STGRAMS
    s1 s2 XCHG
    107 STU
    s1 s3 XCHG
    32 STU
    64 STU
    STREF
    ENDC
    0 PUSHINT
    SENDRAWMSG
  }>
  find_match_order PROC:<{
    0 PUSHINT
    PUSHNULL
    NOW
    -1 PUSHINT
    UNTIL:<{
      s8 PUSH
      64 PUSHINT
      DICTUGETNEXT
      NULLSWAPIFNOT
      NULLSWAPIFNOT
      DUP
      IF:<{
        s0 s2 XCHG
        parse_order CALLDICT
        s15 s3 PUXC
        EQUAL
        s1 s(-1) PUXC
        AND
        s14 PUSH
        HASHSU
        s0 s3 XCHG
        HASHSU
        s1 s3 XCHG
        EQUAL
        s1 s2 XCHG
        AND
        s12 s4 PUSH2
        EQUAL
        AND
        s11 PUSH
        HASHSU
        s4 PUSH
        HASHSU
        EQUAL
        AND
        IF:<{
          4 BLKDROP
          s4 POP
          s4 POP
          s3 PUSH
        }>ELSE<{
          s1 s7 XCPU
          LESS
          IF:<{
            IF:<{
              s3 PUSH
              transfer CALLDICT
            }>ELSE<{
              3 BLKDROP
            }>
            64 PUSHINT
            s1 s10 s10 PUXC2
            DICTUDEL
            DROP
          }>ELSE<{
            s4 s13 XCHG
            4 BLKDROP
          }>
          s0 s9 XCHG
          s0 s4 XCHG
        }>
      }>ELSE<{
        s5 s2 XCHG2
        DROP
      }>
      SWAP
      NOT
      OVER
      0 GTINT
      OR
      s1 s4 XCHG
    }>
    2DROP
    s2 POP
    s2 POP
    s2 POP
    s2 POP
  }>
  try_match_order PROC:<{
    s6 s3 s2 XCPU2
    s3 s8 PUSH2
    find_match_order CALLDICT
    OVER
    0 GTINT
    IF:<{
      s7 s3 s8 XCHG3
      s6 PUSH
      transfer CALLDICT
      s5 s5 s5 XCHG3
      s5 PUSH
      transfer CALLDICT
      DUP
      0 GTINT
      IF:<{
        SWAP
        64 PUSHINT
        DICTUDEL
        DROP
      }>ELSE<{
        DROP
      }>
      s1 s(-1) PUXC
      64 PUSHINT
      DICTUDEL
      DROP
    }>ELSE<{
      s7 s8 s0 XCHG3
      7 BLKDROP
    }>
    SWAP
  }>
  process_user_msg PROC:<{
    64 LDU
    s5 PUSH
    2 GTINT
    IFJMP:<{
      DROP
      s2 POP
      s2 POP
      s2 PUSH
      31 PUSHPOW2
      LESS
      IF:<{
        32 PUSHPOW2DEC
        0 PUSHINT
        s4 s2 XCHG2
        64 PUSHINT
        s0 s2 XCHG
        send_message_back CALLDICT
      }>ELSE<{
        3 BLKDROP
      }>
    }>
    NIP
    c4 PUSH
    CTOS
    64 LDU
    LDDICT
    ENDS
    s1 s6 PUSH2
    1 EQINT
    IF:<{
      s7 POP
      s0 s2 XCHG
      LDGRAMS
      ~load_currency CALLDICT
      SWAP
      LDGRAMS
      ~load_currency CALLDICT
      NIP
      0 PUSHINT
      s3 PUSH
      is_gram CALLDICT
      s4 PUSH
      get_extra_currency CALLDICT
      DUP
      IF:<{
        NIP
        s10 POP
        s9 s8 XCHG2
        32 PUSHINT
        DICTIGET
        NULLSWAPIFNOT
        DROP
        LDGRAMS
        DROP
        -1 PUSHINT
      }>ELSE<{
        s3 s11 XCHG
        s1 s10 s0 XCHG3
        2DROP
      }>
      DUP
      IF:<{
        s8 POP
        s3 PUSH
        GEQ
        100 THROWIFNOT
        s4 s5 XCPU
        0 PUSHINT
        s4 s3 s6 PUSH3
        s12 PUSH
        try_match_order CALLDICT
      }>ELSE<{
        NIP
        s4 PUSH
        INC
        s7 s4 s(-2) PU2XC
        s5 s(-1) PUXC
        transfer_from CALLDICT
        s5 s7 XCHG2
      }>
      0 EQINT
      IF:<{
        s8 POP
        s0 s2 XCHG
        INC
        s4 s5 XCHG
        4 1 REVERSE
        s6 s6 XCHG2
        store_order CALLDICT
        SWAP
        64 PUSHINT
        s1 s3 s3 PUXC2
        DICTUSETB
      }>ELSE<{
        s0 s7 XCHG
        7 BLKDROP
      }>
    }>ELSE<{
      s2 POP
      s4 POP
      s4 POP
      s0 s4 XCHG
      2 EQINT
      IF:<{
        s0 s3 XCHG
        64 LDU
        DROP
        s0 s1 PUSH2
        64 PUSHINT
        DICTUGET
        NULLSWAPIFNOT
        IF:<{
          parse_order CALLDICT
          s1 s3 XCHG
          3 BLKDROP
          s3 PUSH
          HASHSU
          s0 s8 XCHG
          HASHSU
          s1 s8 XCHG
          EQUAL
          IF:<{
            s0 s6 XCHG
            IF:<{
              s1 s0 s5 XCHG3
              s5 PUSH
              transfer CALLDICT
            }>ELSE<{
              s2 s5 XCHG
              3 BLKDROP
            }>
            s1 s2 XCHG
            64 PUSHINT
            DICTUDEL
            DROP
          }>ELSE<{
            s5 s6 XCHG
            s4 s5 XCHG
            5 BLKDROP
          }>
        }>ELSE<{
          s3 s4 XCHG
          s2 s3 XCHG
          3 BLKDROP
        }>
      }>ELSE<{
        s1 s3 s0 XCHG3
        2DROP
      }>
    }>
    NEWC
    s1 s2 XCHG
    64 STU
    STDICT
    ENDC
    c4 POP
  }>
  process_trc20_reply PROC:<{
    SWAP
    64 LDU
    32 LDU
    DROP
    2 NEQINT
    s2 s(-1) PUXC
    AND
    IFJMP:<{
      3 BLKDROP
    }>
    c4 PUSH
    CTOS
    64 LDU
    LDDICT
    ENDS
    s2 s0 PUSH2
    64 PUSHINT
    DICTUGET
    NULLSWAPIFNOT
    IF:<{
      parse_order CALLDICT
      DROP
      0 EQINT
      s3 PUSH
      HASHSU
      s0 s11 XCHG
      HASHSU
      s1 s11 XCHG
      EQUAL
      s1 s10 XCHG
      AND
      IF:<{
        s0 s7 XCHG
        IF:<{
          s3 s2 s5 XCPU2
          s3 s5 s8 PUSH3
          s12 PUSH
          try_match_order CALLDICT
          0 EQINT
          IF:<{
            s4 s3 s0 XCHG3
            s1 s6 s7 XCHG3
            -1 PUSHINT
            store_order CALLDICT
            s0 s1 s3 XCHG3
            64 PUSHINT
            DICTUSETB
          }>ELSE<{
            s4 s7 XCHG
            s0 s6 XCHG
            6 BLKDROP
          }>
        }>ELSE<{
          3 BLKDROP
          s3 POP
          s3 POP
          SWAP
          64 PUSHINT
          DICTUDEL
          DROP
        }>
      }>ELSE<{
        s5 s8 XCHG
        s4 s7 XCHG
        7 BLKDROP
      }>
    }>ELSE<{
      s5 s4 s0 XCHG3
      4 BLKDROP
    }>
    NEWC
    s1 s2 XCHG
    64 STU
    STDICT
    ENDC
    c4 POP
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    4 LDU
    LDMSGADDR
    SWAP
    REWRITEVARADDR
    pack_addr CALLDICT
    SWAP
    LDGRAMS
    NIP
    LDDICT
    DROP
    s0 s3 XCHG
    32 LDU
    OVER
    0 EQINT
    OVER
    SBITS
    0 EQINT
    AND
    IFJMP:<{
      6 BLKDROP
    }>
    s0 s3 XCHG
    1 PUSHINT
    AND
    IF:<{
      s3 POP
      s3 POP
      SWAP
      2 EQINT
      IF:<{
        0 PUSHINT
        process_trc20_reply CALLDICT
      }>ELSE<{
        2DROP
      }>
    }>ELSE<{
      DUP
      31 PUSHPOW2
      EQUAL
      IF:<{
        DROP
        s2 POP
        s2 POP
        SWAP
        1 PUSHINT
        process_trc20_reply CALLDICT
      }>ELSE<{
        ROT
        parse_msg CALLDICT
        s1 s4 XCHG
        s3 s3 s0 XCHG3
        process_user_msg CALLDICT
      }>
    }>
  }>
  recv_external PROC:<{
    2DROP
    ACCEPT
  }>
  seqno PROC:<{
    c4 PUSH
    CTOS
    64 LDU
    LDDICT
    NIP
    ENDS
  }>
  orders PROC:<{
    c4 PUSH
    CTOS
    64 LDU
    NIP
    LDDICT
    ENDS
    PUSHNULL
    -1 PUSHINT
    UNTIL:<{
      s2 PUSH
      64 PUSHINT
      DICTUGETNEXT
      NULLSWAPIFNOT
      NULLSWAPIFNOT
      DUP
      IF:<{
        s0 s2 XCHG
        parse_order CALLDICT
        DROP
        s12 PUSH
        SEMPTY
        s13 PUSH
        HASHSU
        s7 PUSH
        HASHSU
        EQUAL
        OR
        s12 PUSH
        SEMPTY
        s13 PUSH
        HASHSU
        s6 PUSH
        HASHSU
        EQUAL
        OR
        s12 PUSH
        SEMPTY
        s13 PUSH
        HASHSU
        s5 PUSH
        HASHSU
        EQUAL
        OR
        -ROT
        AND
        SWAP
        AND
        IF:<{
          s0 s5 XCHG
          clone_slice CALLDICT
          s0 s3 XCHG
          clone_slice CALLDICT
          s1 s4 XCHG
          PAIR
          s0 s3 XCHG
          clone_slice CALLDICT
          PAIR
          s1 s2 XCHG
          TRIPLE
          s2 s(-1) s(-1) PUXC2
          TRIPLE
          s0 s3 XCHG2
          CONS
        }>ELSE<{
          s6 s8 XCHG
          6 BLKDROP
        }>
      }>ELSE<{
        2SWAP
        DROP
      }>
      SWAP
      NOT
      s1 s2 XCHG
    }>
    s1 s5 XCHG
    5 BLKDROP
  }>
  my_orders PROC:<{
    NEWC
    s1 s2 XCHG
    8 STI
    256 STU
    ENDC
    CTOS
    NEWC
    ENDC
    CTOS
    DUP
    orders CALLDICT
  }>
  test_recv_internal PROC:<{
    recv_internal CALLDICT
    0 PUSHINT
  }>
}END>c
